{"ast":null,"code":"import _regeneratorRuntime from \"/home/marcelo/Documentos/shopManager/shopManager-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getCustomers),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(createCustomer),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getCustomer),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(updateCustomer),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(deleteCustomer),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchCustomer);\n\nimport { takeLatest, put, call, select } from 'redux-saga/effects';\nimport CustomerActions, { CustomerTypes } from '../Redux/CustomerRedux';\nimport ApiResponseError from '../Services/ApiResponseError';\n/**\n * Get the entuty account transactions\n * @param Api    api\n * @param Action action\n */\n\nexport function getCustomers(api, action) {\n  var response, data;\n  return _regeneratorRuntime.wrap(function getCustomers$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(api.getCustomerCollection);\n\n        case 3:\n          response = _context.sent;\n\n          if (response.ok) {\n            _context.next = 6;\n            break;\n          }\n\n          throw new ApiResponseError(response);\n\n        case 6:\n          data = response.data;\n          console.log('save', data);\n          _context.next = 10;\n          return put(CustomerActions.fetchCustomersSuccess(data.services));\n\n        case 10:\n          _context.next = 16;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 16;\n          return put(CustomerActions.fetchCustomersFailure(_context.t0));\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 12]]);\n}\nexport function createCustomer(api, action) {\n  var response, data;\n  return _regeneratorRuntime.wrap(function createCustomer$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(api.postCustomerCollection, action.service);\n\n        case 3:\n          response = _context2.sent;\n\n          if (response.ok) {\n            _context2.next = 6;\n            break;\n          }\n\n          throw new ApiResponseError(response);\n\n        case 6:\n          data = response.data.data;\n          _context2.next = 9;\n          return put(CustomerActions.createCustomerSuccess(data.service));\n\n        case 9:\n          _context2.next = 15;\n          break;\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 15;\n          return put(CustomerActions.createCustomerFailure(_context2.t0));\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 11]]);\n}\nexport function getCustomer(api, action) {\n  var response, data;\n  return _regeneratorRuntime.wrap(function getCustomer$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(api.getCustomerResource, action.service_id);\n\n        case 3:\n          response = _context3.sent;\n\n          if (response.ok) {\n            _context3.next = 6;\n            break;\n          }\n\n          throw new ApiResponseError(response);\n\n        case 6:\n          data = response.data.data;\n          _context3.next = 9;\n          return put(CustomerActions.fetchCustomerSuccess(data.service));\n\n        case 9:\n          _context3.next = 15;\n          break;\n\n        case 11:\n          _context3.prev = 11;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 15;\n          return put(CustomerActions.fetchCustomerFailure(_context3.t0));\n\n        case 15:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 11]]);\n}\nexport function updateCustomer(api, action) {\n  var response, data;\n  return _regeneratorRuntime.wrap(function updateCustomer$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(api.patchCustomerResource, action.service_id, action.service);\n\n        case 3:\n          response = _context4.sent;\n\n          if (response.ok) {\n            _context4.next = 6;\n            break;\n          }\n\n          throw new ApiResponseError(response);\n\n        case 6:\n          data = response.data.data;\n          _context4.next = 9;\n          return put(CustomerActions.updateCustomerSuccess(data.service));\n\n        case 9:\n          _context4.next = 15;\n          break;\n\n        case 11:\n          _context4.prev = 11;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 15;\n          return put(CustomerActions.updateCustomerFailure(_context4.t0));\n\n        case 15:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 11]]);\n}\nexport function deleteCustomer(api, action) {\n  var response;\n  return _regeneratorRuntime.wrap(function deleteCustomer$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(api.deleteCustomerResource, action.service_id);\n\n        case 3:\n          response = _context5.sent;\n\n          if (response.ok) {\n            _context5.next = 6;\n            break;\n          }\n\n          throw new ApiResponseError(response);\n\n        case 6:\n          _context5.next = 8;\n          return put(CustomerActions.deleteCustomerSuccess());\n\n        case 8:\n          _context5.next = 14;\n          break;\n\n        case 10:\n          _context5.prev = 10;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 14;\n          return put(CustomerActions.deleteCustomerFailure(_context5.t0));\n\n        case 14:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 10]]);\n}\nexport function watchCustomer(api) {\n  return _regeneratorRuntime.wrap(function watchCustomer$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(CustomerTypes.FETCH_CUSTOMERS, getCustomers, api);\n\n        case 2:\n          _context6.next = 4;\n          return takeLatest(CustomerTypes.CREATE_CUSTOMER, createCustomer, api);\n\n        case 4:\n          _context6.next = 6;\n          return takeLatest(CustomerTypes.FETCH_CUSTOMER, getCustomer, api);\n\n        case 6:\n          _context6.next = 8;\n          return takeLatest(CustomerTypes.UPDATE_CUSTOMER, updateCustomer, api);\n\n        case 8:\n          _context6.next = 10;\n          return takeLatest(CustomerTypes.DELETE_CUSTOMER, deleteCustomer, api);\n\n        case 10:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}","map":{"version":3,"sources":["/home/marcelo/Documentos/shopManager/shopManager-frontend/src/Sagas/CustomerSagas.js"],"names":["getCustomers","createCustomer","getCustomer","updateCustomer","deleteCustomer","watchCustomer","takeLatest","put","call","select","CustomerActions","CustomerTypes","ApiResponseError","api","action","getCustomerCollection","response","ok","data","console","log","fetchCustomersSuccess","services","fetchCustomersFailure","postCustomerCollection","service","createCustomerSuccess","createCustomerFailure","getCustomerResource","service_id","fetchCustomerSuccess","fetchCustomerFailure","patchCustomerResource","updateCustomerSuccess","updateCustomerFailure","deleteCustomerResource","deleteCustomerSuccess","deleteCustomerFailure","FETCH_CUSTOMERS","CREATE_CUSTOMER","FETCH_CUSTOMER","UPDATE_CUSTOMER","DELETE_CUSTOMER"],"mappings":"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","sourcesContent":["import { takeLatest, put, call, select } from 'redux-saga/effects';\nimport CustomerActions, { CustomerTypes } from '../Redux/CustomerRedux';\nimport ApiResponseError from '../Services/ApiResponseError';\n\n/**\n * Get the entuty account transactions\n * @param Api    api\n * @param Action action\n */\nexport function * getCustomers(api, action) {\n    try {\n        const response = yield call(api.getCustomerCollection);\n        if (!response.ok) {\n            throw new ApiResponseError(response);\n        }\n\n        const data = response.data;\n        console.log('save', data);\n\n        yield put(CustomerActions.fetchCustomersSuccess(data.services));\n    } catch (e) {\n        yield put(CustomerActions.fetchCustomersFailure(e));\n    }\n}\n\nexport function * createCustomer(api, action) {\n    try {\n        const response = yield call(api.postCustomerCollection, action.service);\n\n        if (!response.ok) {\n            throw new ApiResponseError(response);\n        }\n\n        const data = response.data.data;\n\n        yield put(CustomerActions.createCustomerSuccess(data.service));\n    } catch (e) {\n        yield put(CustomerActions.createCustomerFailure(e));\n    }\n}\n\nexport function * getCustomer(api, action) {\n    try {\n        const response = yield call(api.getCustomerResource, action.service_id);\n        if (!response.ok) {\n            throw new ApiResponseError(response);\n        }\n        const data = response.data.data;\n\n        yield put(CustomerActions.fetchCustomerSuccess(data.service));\n    } catch (e) {\n        yield put(CustomerActions.fetchCustomerFailure(e));\n    }\n}\n\nexport function * updateCustomer(api, action) {\n    try {\n        const response = yield call(api.patchCustomerResource, action.service_id, action.service);\n\n        if (!response.ok) {\n            throw new ApiResponseError(response);\n        }\n\n        const data = response.data.data;\n\n        yield put(CustomerActions.updateCustomerSuccess(data.service));\n    } catch (e) {\n        yield put(CustomerActions.updateCustomerFailure(e));\n    }\n}\n\nexport function * deleteCustomer(api, action) {\n    try {\n        const response = yield call(api.deleteCustomerResource, action.service_id );\n        if (!response.ok) {\n            throw new ApiResponseError(response);\n        }\n\n        yield put(CustomerActions.deleteCustomerSuccess());\n    } catch (e) {\n        yield put(CustomerActions.deleteCustomerFailure(e));\n    }\n}\n\nexport function * watchCustomer(api) {\n    yield takeLatest(CustomerTypes.FETCH_CUSTOMERS, getCustomers, api);\n    yield takeLatest(CustomerTypes.CREATE_CUSTOMER, createCustomer, api);\n    yield takeLatest(CustomerTypes.FETCH_CUSTOMER, getCustomer, api);\n    yield takeLatest(CustomerTypes.UPDATE_CUSTOMER, updateCustomer, api);\n    yield takeLatest(CustomerTypes.DELETE_CUSTOMER, deleteCustomer, api);\n}\n"]},"metadata":{},"sourceType":"module"}