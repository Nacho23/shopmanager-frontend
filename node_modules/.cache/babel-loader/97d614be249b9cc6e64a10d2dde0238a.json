{"ast":null,"code":"import _classCallCheck from \"/home/marcelo/Documentos/shopManager/shopManager-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/marcelo/Documentos/shopManager/shopManager-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/marcelo/Documentos/shopManager/shopManager-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/marcelo/Documentos/shopManager/shopManager-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/marcelo/Documentos/shopManager/shopManager-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/marcelo/Documentos/shopManager/shopManager-frontend/src/Containers/Customer/CustomerContainer.js\";\nimport React, { Component } from 'react';\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport history from '../../CusfetchCustomers/history';\nimport AuthActions from '../../Redux/CustomerRedux';\nimport CustomerListComponent from '../../Components/Customer/CustomerListComponent';\nimport CustomerFormComponent from '../../Components/Customer/CustomerFormComponent';\n\nvar CustomerContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CustomerContainer, _Component);\n\n  function CustomerContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CustomerContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CustomerContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      modalCreateCustomer: false,\n      titleModal: 'Agregar cliente',\n      customerToEdit: null\n    };\n\n    _this.componentDidMount = function () {\n      //console.log('', this.props)\n      _this.props.actions.customer.fetchCustomers();\n    };\n\n    _this.componentDidUpdate = function (prevProps) {\n      if (!prevProps.customer.customerCreated && _this.props.customer.customerCreated || !prevProps.customer.customerUpdated && _this.props.customer.customerUpdated || !prevProps.customer.customerDeleted && _this.props.customer.customerDeleted) {\n        _this.props.actions.customer.fetchCustomers();\n\n        _this.setState({\n          modal: false\n        });\n      } else if (!prevProps.customer.customerToEdit && _this.props.customer.customerToEdit) {\n        _this.setState({\n          customerToEdit: _this.props.customer.customerToEdit\n        }, function () {\n          _this.toggleConfirm();\n        });\n      }\n    };\n\n    _this.toggleConfirm = function () {\n      _this.setState({\n        modalCreateCustomer: !_this.state.modalCreateCustomer\n      });\n    };\n\n    _this.getCustomer = function (id) {\n      _this.props.actions.customer.fetchCustomer(id);\n    };\n\n    return _this;\n  }\n\n  _createClass(CustomerContainer, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(Modal, {\n        isOpen: this.state.modalCreateCustomer,\n        className: 'modal-success',\n        toggle: this.toggleConfirm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toggleConfirm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, this.state.titleModal), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(CustomerFormComponent, {\n        onAccept: this.createCustomer,\n        onCancel: this.toggleConfirm,\n        customerToEdit: this.state.customerToEdit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }))), React.createElement(CustomerListComponent, {\n        onOpenModal: this.toggleConfirm,\n        customers: this.props.customer.customers,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return CustomerContainer;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    customer: state.customer\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      customer: bindActionCreators(AuthActions, dispatch)\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomerContainer);","map":{"version":3,"sources":["/home/marcelo/Documentos/shopManager/shopManager-frontend/src/Containers/Customer/CustomerContainer.js"],"names":["React","Component","Modal","ModalHeader","ModalBody","connect","bindActionCreators","history","AuthActions","CustomerListComponent","CustomerFormComponent","CustomerContainer","state","modalCreateCustomer","titleModal","customerToEdit","componentDidMount","props","actions","customer","fetchCustomers","componentDidUpdate","prevProps","customerCreated","customerUpdated","customerDeleted","setState","modal","toggleConfirm","getCustomer","id","fetchCustomer","createCustomer","customers","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Modal,\n    ModalHeader,\n    ModalBody\n} from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport history from '../../CusfetchCustomers/history';\nimport AuthActions from '../../Redux/CustomerRedux';\nimport CustomerListComponent from '../../Components/Customer/CustomerListComponent';\nimport CustomerFormComponent from '../../Components/Customer/CustomerFormComponent';\n\nclass CustomerContainer extends Component {\n    state = {\n        modalCreateCustomer: false,\n        titleModal: 'Agregar cliente',\n        customerToEdit: null,\n    }\n    componentDidMount = () => {\n        //console.log('', this.props)\n        this.props.actions.customer.fetchCustomers();\n    }\n    componentDidUpdate = (prevProps) => {\n        if (!prevProps.customer.customerCreated && this.props.customer.customerCreated ||\n            !prevProps.customer.customerUpdated && this.props.customer.customerUpdated ||\n            !prevProps.customer.customerDeleted && this.props.customer.customerDeleted) {\n                this.props.actions.customer.fetchCustomers();\n                this.setState({\n                    modal: false,\n                })\n        } else if (!prevProps.customer.customerToEdit && this.props.customer.customerToEdit) {\n            this.setState({\n                customerToEdit: this.props.customer.customerToEdit,\n            }, () => {\n                this.toggleConfirm();\n            })\n        }\n    }\n    toggleConfirm = () => {\n        this.setState({ modalCreateCustomer: !this.state.modalCreateCustomer });\n    }\n    getCustomer = (id) => {\n        this.props.actions.customer.fetchCustomer(id);\n    }\n    render() {\n        return (\n            <div>\n                <Modal isOpen={this.state.modalCreateCustomer} className={'modal-success'} toggle={this.toggleConfirm}>\n                    <ModalHeader toggle={this.toggleConfirm}>{this.state.titleModal}</ModalHeader>\n                    <ModalBody>\n                        <CustomerFormComponent\n                            onAccept={this.createCustomer}\n                            onCancel={this.toggleConfirm}\n                            customerToEdit={this.state.customerToEdit}\n                        />\n                    </ModalBody>\n                </Modal>\n                <CustomerListComponent\n                    onOpenModal={this.toggleConfirm}\n                    customers={this.props.customer.customers} />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    customer: state.customer,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: {\n        customer: bindActionCreators(AuthActions, dispatch),\n    },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomerContainer);"]},"metadata":{},"sourceType":"module"}