{"ast":null,"code":"import ReduxPersist from '../Config/ReduxPersist';\nimport { persistStore } from 'redux-persist';\nimport StartupActions from '../Redux/StartupRedux';\nimport DebugConfig from '../Config/DebugConfig';\n\nvar updateReducers = function updateReducers(store) {\n  var reducerVersion = ReduxPersist.reducerVersion;\n  var config = ReduxPersist.storeConfig;\n\n  var startup = function startup() {\n    return store.dispatch(StartupActions.init());\n  };\n\n  var localVersion = localStorage.getItem('reducerVersion'); // Check to ensure latest reducer version\n\n  if (!localVersion) {\n    persistStore(store, config, startup);\n    localStorage.setItem('reducerVersion', reducerVersion);\n  } else {\n    if (localVersion !== reducerVersion) {\n      persistStore(store, config, startup).purge();\n      localStorage.setItem('reducerVersion', reducerVersion);\n      localStorage.removeItem('authorization');\n    } else {\n      persistStore(store, config, startup);\n    }\n  }\n};\n\nexport default {\n  updateReducers: updateReducers\n};","map":{"version":3,"sources":["/home/marcelo/Documentos/shopManager/shopManager-frontend/src/Services/RehydrationServices.js"],"names":["ReduxPersist","persistStore","StartupActions","DebugConfig","updateReducers","store","reducerVersion","config","storeConfig","startup","dispatch","init","localVersion","localStorage","getItem","setItem","purge","removeItem"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,wBAAzB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,WAAP,MAAwB,uBAAxB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAmB;AACtC,MAAMC,cAAc,GAAGN,YAAY,CAACM,cAApC;AACA,MAAMC,MAAM,GAAGP,YAAY,CAACQ,WAA5B;;AACA,MAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA,WAAMJ,KAAK,CAACK,QAAN,CAAeR,cAAc,CAACS,IAAf,EAAf,CAAN;AAAA,GAAhB;;AAEA,MAAIC,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAAnB,CALsC,CAMtC;;AACA,MAAI,CAACF,YAAL,EACA;AACIX,IAAAA,YAAY,CAACI,KAAD,EAAQE,MAAR,EAAgBE,OAAhB,CAAZ;AACAI,IAAAA,YAAY,CAACE,OAAb,CAAqB,gBAArB,EAAuCT,cAAvC;AACH,GAJD,MAKI;AACA,QAAIM,YAAY,KAAKN,cAArB,EAAqC;AACjCL,MAAAA,YAAY,CAACI,KAAD,EAAQE,MAAR,EAAgBE,OAAhB,CAAZ,CAAqCO,KAArC;AACAH,MAAAA,YAAY,CAACE,OAAb,CAAqB,gBAArB,EAAuCT,cAAvC;AACAO,MAAAA,YAAY,CAACI,UAAb,CAAwB,eAAxB;AACH,KAJD,MAIO;AACHhB,MAAAA,YAAY,CAACI,KAAD,EAAQE,MAAR,EAAgBE,OAAhB,CAAZ;AACH;AACJ;AACJ,CArBD;;AAuBA,eAAe;AAACL,EAAAA,cAAc,EAAdA;AAAD,CAAf","sourcesContent":["import ReduxPersist from '../Config/ReduxPersist';\nimport { persistStore } from 'redux-persist';\nimport StartupActions from '../Redux/StartupRedux';\nimport DebugConfig from '../Config/DebugConfig';\n\nconst updateReducers = (store: Object) => {\n    const reducerVersion = ReduxPersist.reducerVersion\n    const config = ReduxPersist.storeConfig\n    const startup = () => store.dispatch(StartupActions.init())\n\n    var localVersion = localStorage.getItem('reducerVersion');\n    // Check to ensure latest reducer version\n    if (!localVersion)\n    {\n        persistStore(store, config, startup);\n        localStorage.setItem('reducerVersion', reducerVersion);\n    }\n    else{\n        if (localVersion !== reducerVersion) {\n            persistStore(store, config, startup).purge();\n            localStorage.setItem('reducerVersion', reducerVersion);\n            localStorage.removeItem('authorization');\n        } else {\n            persistStore(store, config, startup)\n        }\n    }\n}\n\nexport default {updateReducers}\n"]},"metadata":{},"sourceType":"module"}