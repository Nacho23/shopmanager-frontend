{"ast":null,"code":"import { createStore, applyMiddleware, compose } from 'redux';\nimport { autoRehydrate } from 'redux-persist';\nimport Config from '../Config/DebugConfig';\nimport createSagaMiddleware from 'redux-saga';\nimport RehydrationServices from '../Services/RehydrationServices';\nimport ReduxPersist from '../Config/ReduxPersist'; // creates the store\n\nexport default (function (rootReducer, rootSaga) {\n  /* ------------- Redux Configuration ------------- */\n  var middleware = [];\n  var enhancers = [];\n  /* ------------- Saga Middleware ------------- */\n\n  var sagaMonitor = Config.useReactotron ? console.tron.createSagaMonitor() : null;\n  var sagaMiddleware = createSagaMiddleware({\n    sagaMonitor: sagaMonitor\n  });\n  middleware.push(sagaMiddleware);\n  /* ------------- Assemble Middleware ------------- */\n\n  enhancers.push(applyMiddleware.apply(void 0, middleware));\n  /* ------------- AutoRehydrate Enhancer ------------- */\n  // add the autoRehydrate enhancer\n\n  if (ReduxPersist.active) {\n    enhancers.push(autoRehydrate());\n    console.log('ok');\n  } // if Reactotron is enabled (default for __DEV__), we'll create the store through Reactotron\n\n\n  var createAppropriateStore = Config.useReactotron ? console.tron.createStore : createStore;\n  var store = createAppropriateStore(rootReducer, compose.apply(void 0, enhancers)); // configure persistStore and check reducer version number\n\n  if (ReduxPersist.active) {\n    RehydrationServices.updateReducers(store);\n  } // kick off root saga\n\n\n  var sagasManager = sagaMiddleware.run(rootSaga);\n  return {\n    store: store,\n    sagasManager: sagasManager,\n    sagaMiddleware: sagaMiddleware\n  };\n});","map":{"version":3,"sources":["/home/marcelo/Documentos/shopManager/shopManager-frontend/src/Redux/CreateStore.js"],"names":["createStore","applyMiddleware","compose","autoRehydrate","Config","createSagaMiddleware","RehydrationServices","ReduxPersist","rootReducer","rootSaga","middleware","enhancers","sagaMonitor","useReactotron","console","tron","createSagaMonitor","sagaMiddleware","push","active","log","createAppropriateStore","store","updateReducers","sagasManager","run"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,aAAT,QAA8B,eAA9B;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;AACA,OAAOC,YAAP,MAAyB,wBAAzB,C,CAEA;;AACA,gBAAe,UAACC,WAAD,EAAcC,QAAd,EAA2B;AACxC;AAEA,MAAMC,UAAU,GAAG,EAAnB;AACA,MAAMC,SAAS,GAAG,EAAlB;AAEA;;AAEA,MAAMC,WAAW,GAAGR,MAAM,CAACS,aAAP,GAAuBC,OAAO,CAACC,IAAR,CAAaC,iBAAb,EAAvB,GAA0D,IAA9E;AACA,MAAMC,cAAc,GAAGZ,oBAAoB,CAAC;AAAEO,IAAAA,WAAW,EAAXA;AAAF,GAAD,CAA3C;AACAF,EAAAA,UAAU,CAACQ,IAAX,CAAgBD,cAAhB;AAEA;;AAEAN,EAAAA,SAAS,CAACO,IAAV,CAAejB,eAAe,MAAf,SAAmBS,UAAnB,CAAf;AAEA;AAEA;;AACA,MAAIH,YAAY,CAACY,MAAjB,EAAyB;AACvBR,IAAAA,SAAS,CAACO,IAAV,CAAef,aAAa,EAA5B;AACAW,IAAAA,OAAO,CAACM,GAAR,CAAY,IAAZ;AACD,GAtBuC,CAwBxC;;;AACA,MAAMC,sBAAsB,GAAGjB,MAAM,CAACS,aAAP,GAAuBC,OAAO,CAACC,IAAR,CAAaf,WAApC,GAAkDA,WAAjF;AACA,MAAMsB,KAAK,GAAGD,sBAAsB,CAACb,WAAD,EAAcN,OAAO,MAAP,SAAWS,SAAX,CAAd,CAApC,CA1BwC,CA4BxC;;AACA,MAAIJ,YAAY,CAACY,MAAjB,EAAyB;AACvBb,IAAAA,mBAAmB,CAACiB,cAApB,CAAmCD,KAAnC;AACD,GA/BuC,CAiCxC;;;AACA,MAAIE,YAAY,GAAGP,cAAc,CAACQ,GAAf,CAAmBhB,QAAnB,CAAnB;AAEA,SAAO;AACLa,IAAAA,KAAK,EAALA,KADK;AAELE,IAAAA,YAAY,EAAZA,YAFK;AAGLP,IAAAA,cAAc,EAAdA;AAHK,GAAP;AAKD,CAzCD","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\nimport { autoRehydrate } from 'redux-persist';\nimport Config from '../Config/DebugConfig';\nimport createSagaMiddleware from 'redux-saga';\nimport RehydrationServices from '../Services/RehydrationServices';\nimport ReduxPersist from '../Config/ReduxPersist';\n\n// creates the store\nexport default (rootReducer, rootSaga) => {\n  /* ------------- Redux Configuration ------------- */\n\n  const middleware = []\n  const enhancers = []\n\n  /* ------------- Saga Middleware ------------- */\n\n  const sagaMonitor = Config.useReactotron ? console.tron.createSagaMonitor() : null\n  const sagaMiddleware = createSagaMiddleware({ sagaMonitor })\n  middleware.push(sagaMiddleware)\n\n  /* ------------- Assemble Middleware ------------- */\n\n  enhancers.push(applyMiddleware(...middleware))\n\n  /* ------------- AutoRehydrate Enhancer ------------- */\n\n  // add the autoRehydrate enhancer\n  if (ReduxPersist.active) {\n    enhancers.push(autoRehydrate())\n    console.log('ok')\n  }\n\n  // if Reactotron is enabled (default for __DEV__), we'll create the store through Reactotron\n  const createAppropriateStore = Config.useReactotron ? console.tron.createStore : createStore\n  const store = createAppropriateStore(rootReducer, compose(...enhancers))\n\n  // configure persistStore and check reducer version number\n  if (ReduxPersist.active) {\n    RehydrationServices.updateReducers(store)\n  }\n\n  // kick off root saga\n  let sagasManager = sagaMiddleware.run(rootSaga)\n\n  return {\n    store,\n    sagasManager,\n    sagaMiddleware\n  }\n}\n"]},"metadata":{},"sourceType":"module"}