{"ast":null,"code":"export var ALLOWED_FILES = ['png', 'jpg', 'jpge', 'jpeg', 'doc', 'pdf', 'docx', 'xlsx', 'xls', 'csv', 'gif'];\nexport var IMAGE = ['png', 'jpg', 'jpge', 'gif', 'jpeg'];\nvar util = {\n  formatMoney: function formatMoney(amount) {\n    return '$' + amount.toLocaleString('es-ES', {\n      style: 'currency',\n      currency: 'CLP'\n    });\n  },\n  onFileChange: function onFileChange(selectorFiles, callback) {\n    var reader = new FileReader();\n    var file = selectorFiles[0];\n\n    reader.onload = function (upload) {\n      var type = file.type.split('/');\n\n      if (ALLOWED_FILES.indexOf(type[1]) >= 0) {\n        callback({\n          data: upload.target.result,\n          name: file.name,\n          type: type[1]\n        });\n      } else {\n        callback({\n          error: 'Invalid format'\n        });\n      }\n    };\n\n    reader.readAsDataURL(file);\n  }\n};\nexport default util;","map":{"version":3,"sources":["/home/marcelo/Documentos/shopManager/shopManager-frontend/src/Util/util.js"],"names":["ALLOWED_FILES","IMAGE","util","formatMoney","amount","toLocaleString","style","currency","onFileChange","selectorFiles","callback","reader","FileReader","file","onload","upload","type","split","indexOf","data","target","result","name","error","readAsDataURL"],"mappings":"AAAA,OAAO,IAAMA,aAAa,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,MAAf,EAAuB,MAAvB,EAA+B,KAA/B,EAAsC,KAAtC,EAA6C,MAA7C,EAAqD,MAArD,EAA6D,KAA7D,EAAoE,KAApE,EAA2E,KAA3E,CAAtB;AACP,OAAO,IAAMC,KAAK,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,MAAf,EAAuB,KAAvB,EAA8B,MAA9B,CAAd;AAEP,IAAMC,IAAI,GAAG;AACTC,EAAAA,WAAW,EAAE,qBAACC,MAAD,EAAY;AACrB,WAAO,MAAOA,MAAD,CAASC,cAAT,CAAwB,OAAxB,EAAiC;AAC1CC,MAAAA,KAAK,EAAE,UADmC;AAE1CC,MAAAA,QAAQ,EAAE;AAFgC,KAAjC,CAAb;AAIH,GANQ;AAOTC,EAAAA,YAAY,EAAE,sBAACC,aAAD,EAAgBC,QAAhB,EAA6B;AACvC,QAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACA,QAAIC,IAAI,GAAGJ,aAAa,CAAC,CAAD,CAAxB;;AACAE,IAAAA,MAAM,CAACG,MAAP,GAAgB,UAACC,MAAD,EAAY;AACxB,UAAMC,IAAI,GAAGH,IAAI,CAACG,IAAL,CAAUC,KAAV,CAAgB,GAAhB,CAAb;;AACA,UAAIjB,aAAa,CAACkB,OAAd,CAAsBF,IAAI,CAAC,CAAD,CAA1B,KAAkC,CAAtC,EAAwC;AACpCN,QAAAA,QAAQ,CAAC;AACLS,UAAAA,IAAI,EAAEJ,MAAM,CAACK,MAAP,CAAcC,MADf;AAELC,UAAAA,IAAI,EAAET,IAAI,CAACS,IAFN;AAGLN,UAAAA,IAAI,EAAEA,IAAI,CAAC,CAAD;AAHL,SAAD,CAAR;AAKH,OAND,MAOI;AACAN,QAAAA,QAAQ,CAAC;AAACa,UAAAA,KAAK,EAAE;AAAR,SAAD,CAAR;AACH;AACJ,KAZD;;AAcAZ,IAAAA,MAAM,CAACa,aAAP,CAAqBX,IAArB;AACH;AAzBQ,CAAb;AA4BA,eAAeX,IAAf","sourcesContent":["export const ALLOWED_FILES = ['png', 'jpg', 'jpge', 'jpeg', 'doc', 'pdf', 'docx', 'xlsx', 'xls', 'csv', 'gif'];\nexport const IMAGE = ['png', 'jpg', 'jpge', 'gif', 'jpeg'];\n\nconst util = {\n    formatMoney: (amount) => {\n        return '$' + (amount).toLocaleString('es-ES', {\n            style: 'currency',\n            currency: 'CLP',\n        });\n    },\n    onFileChange: (selectorFiles, callback) => {\n        const reader = new FileReader();\n        var file = selectorFiles[0];\n        reader.onload = (upload) => {\n            const type = file.type.split('/');\n            if (ALLOWED_FILES.indexOf(type[1]) >= 0){\n                callback({\n                    data: upload.target.result,\n                    name: file.name,\n                    type: type[1],\n                });\n            }\n            else{\n                callback({error: 'Invalid format'});\n            }\n        };\n\n        reader.readAsDataURL(file);\n    }\n};\n\nexport default util;"]},"metadata":{},"sourceType":"module"}